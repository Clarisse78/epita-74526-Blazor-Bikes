@page "/bikes"
@attribute [StreamRendering]
@using Newtonsoft.Json
<PageTitle>Bikes</PageTitle>

<h1>Bikes</h1>


@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Number</th>
                <th>Contract Name</th>
                <th>Name</th>
                <th>Address</th>
                <th>Banking</th>
                <th>Bonus</th>
                <th>Bike Stands</th>
                <th>Bike availaible</th>
                <th>Status</th>
                <th>Last update</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>
                        @forecast.number
                    </td>
                    <td>@forecast.contract_name</td>
                    <td>@forecast.name</td>
                    <td>@forecast.address</td>
                    <td>@(forecast.banking ? "✔" : "❌")</td>
                    <td>@(forecast.bonus ? "✔" : "❌")</td>
                    <td>@forecast.available_bike_stands</td>
                    <td>@forecast.available_bikes</td>
                    <td>@(forecast.status)</td>
                    <td>@forecast.last_update</td>
                    <td>
                        <NavLink class="nav-link" href="@($"details/{forecast.number}")">
                             <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Details
                         </NavLink>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}

@code {

    public class BikeController
    {
        Uri baseAddress = new Uri("https://api.jcdecaux.com/vls/v1/stations?contract=dublin&apiKey=79db4de4b7c9b56bfccb3fe4bc50b15db45809ab");

        private readonly HttpClient _httpClient;

        public BikeController()
        {
            _httpClient = new HttpClient();
            _httpClient.BaseAddress = baseAddress;
        }

        public List<test.models.Stations> Index()
        {
            List<test.models.Stations> userProfiles = new();


            HttpResponseMessage httpResponseMessage = _httpClient.GetAsync(baseAddress).Result;

            if (httpResponseMessage.IsSuccessStatusCode)
            {
                string data = httpResponseMessage.Content.ReadAsStringAsync().Result;
                userProfiles = JsonConvert.DeserializeObject<List<test.models.Stations>>(data);
            }

            return userProfiles;
        }

    }


    private test.models.Stations[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var bikeController = new BikeController();
        var userProfiles = bikeController.Index();

        if (userProfiles != null)
        {
            forecasts = userProfiles.ToArray();
            test.models.AllStations.setStations(forecasts);
        }
        else
        {
            forecasts = Array.Empty<test.models.Stations>();
        }

   
        
    }
}
